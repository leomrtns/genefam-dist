import _treesignalc, dendropy, numpy

def lowlevel_create_random_tree_string (ntax = 16):
    t1 = dendropy.simulate.treesim.birth_death_tree(birth_rate=1.0, death_rate=0.5, ntax=ntax)
    #t1.find_node_with_taxon_label("T6").taxon.label="T1" # enough to change the newick format: doesnt change Taxon, only its label 
    return t1.as_string("newick")

def lowlevel_generate_spr_trees_string(n_species=8, chain_size=10, n_spr=1):
    """ Direct call to C function that will generate a string with a chain of trees generated by SPR over previous one """
    if n_species < 4:
        n_species =4
    if chain_size < 2:
        chain_zise = 2
    return _treesignalc.generate_spr_trees(n_species, chain_size, n_spr)

def low_level_calculate_spectrum_from_tree_strings(gene_tree_str, species_tree_str):
    """ Direct call to C function that calculates unscaled distances from gene tree (newick string) to set of species
    trees (newick trees) """
    return numpy.array(_treesignalc.fromtrees(gene_tree_str, species_tree_str))

def low_level_calculate_spectrum_from_tree_strings_rescale(gene_tree_str, species_tree_str):
    """ Direct call to C function that calculates scaled distances from gene tree (newick string) to set of species
    trees (newick trees) """
    return numpy.array(_treesignalc.fromtrees_pvalue(gene_tree_str, species_tree_str, ntrees))

def low_level_calculate_spectrum_from_tree_strings_pvalue(gene_tree_str, species_tree_str, ntrees=1000):
    """ Direct call to C function that calculates p-valued distances from gene tree (newick string) to set of species
    trees (newick trees) """
    return numpy.array(_treesignalc.fromtrees_pvalue(gene_tree_str, species_tree_str, ntrees))
